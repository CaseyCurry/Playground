{"version":3,"file":"architect-address-widget.umd.min.js","sources":["~/@navihealth/architect-address-widget/src/app/bus.ts","~/@navihealth/architect-address-widget/src/app/app.component.ts","~/@navihealth/architect-address-widget/src/app/app.module.ts","~/@navihealth/architect-address-widget/src/environments/environment.ts","~/@navihealth/architect-address-widget/src/widget.ts"],"sourcesContent":["declare const process: any;\ndeclare const window: any;\n\ntype ResponderFunction = (event: IEvent) => Promise<any>;\n\ninterface IListener {\n  eventName: string;\n  responder: ResponderFunction;\n}\n\ninterface IEvent {\n  eventName: string;\n  message?: any;\n}\n\nclass Bus {\n  subscribers: object;\n\n  constructor() {\n    this.subscribers = {};\n  }\n\n  public listen(listener: IListener) {\n    this.writeToConsoleInDev('listen', listener);\n    if (!listener.eventName) {\n      throw new Error('Argument listener.eventName is required.');\n    }\n    if (!listener.responder) {\n      throw new Error('Argument listener.respond is required.');\n    }\n    if (!this.subscribers[listener.eventName]) {\n      this.subscribers[listener.eventName] = [];\n    }\n    this.subscribers[listener.eventName].push(listener);\n  }\n\n  public ignore(listener: IListener) {\n    this.writeToConsoleInDev('ignore', listener);\n    if (!listener || !listener.eventName) {\n      return;\n    }\n    const listeners = this.subscribers[listener.eventName];\n    if (!listeners || listeners.length === 0) {\n      return;\n    }\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      this.subscribers[listener.eventName].splice(index, 1);\n    }\n  }\n\n  public notify(event: IEvent) {\n    this.writeToConsoleInDev('notify', event);\n    return new Promise((resolve, reject) => {\n      if (!event.eventName) {\n        reject(new Error('Argument event.eventName is required.'));\n      }\n      const listeners = this.subscribers[event.eventName];\n      if (listeners) {\n        resolve(Promise\n          .all(listeners.map(listener => listener.responder(event))));\n      }\n    });\n  }\n\n  private writeToConsoleInDev(action: string, context: any) {\n    if (process.env.DEV) {\n      console.log('@navihealth/browser-bus ' + action, context);\n    }\n  }\n}\n\nconst BusFactory = {\n  create: () => {\n    if (window.nhBrowserBus && window.nhBrowserBus.instance) {\n      return window.nhBrowserBus.instance;\n    } if (window.nhBrowserBus) {\n      const instance = new Bus();\n      window.nhBrowserBus.instance = instance;\n      return instance;\n    } else {\n      const instance = new Bus();\n      window.nhBrowserBus = { instance: instance };\n      return instance;\n    }\n  }\n};\n\nexport { BusFactory };\n","import { Component, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { BusFactory } from './bus';\n\nexport interface IAddress {\n  line1: string;\n  line2?: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n}\n\n@Component({\n  selector: 'architect-address-widget',\n  template: `\n    <div class='col-xs-12'>\n      <label>line 1:</label>\n      <span *ngIf=\"address\">{{ address.line1 }}</span>\n    </div>\n    <div class='col-xs-12'>\n      <label>line 2:</label>\n      <span *ngIf=\"address\">{{ address.line2 }}</span>\n    </div>\n    <div class='row'>\n      <div class='col-8'>\n        <label>city:</label>\n        <span *ngIf=\"address\">{{ address.city }}</span>\n      </div>\n      <div class='col-4'>\n        <label>state:</label>\n        <span *ngIf=\"address\">{{ address.state }}</span>\n      </div>\n    </div>\n    <div class='col-xs-12'>\n      <label>postal code:</label>\n      <span *ngIf=\"address\">{{ address.postalCode }}</span>\n    </div>\n    <div class='col-xs-12'>\n      <label>country:</label>\n      <span *ngIf=\"address\">{{ address.country }}</span>\n    </div>\n  `,\n  styles: [`\n    :host.architect-address-widget {\n      color: red;\n    }\n  `]\n})\nexport class AppComponent {\n  title: string;\n  bus: any;\n  address: IAddress;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef, private elementRef: ElementRef) {\n    this.title = 'address';\n    this.bus = BusFactory.create();\n    this.bus.listen({\n      eventName: 'architect-selected',\n      responder: (event) => {\n        this.address = this.getAddress(event.message.name);\n        changeDetectorRef.detectChanges();\n      }\n    });\n  }\n\n  private getAddress(architect): IAddress {\n    switch (architect) {\n      case 'Seshan':\n        return {\n          line1: '123 Scenic Dr',\n          line2: 'Apt 43',\n          city: 'Nashville',\n          state: 'TN',\n          postalCode: '37203',\n          country: 'US'\n        };\n      case 'Nijil':\n        return {\n          line1: '456 Pearl St',\n          city: 'Nashville',\n          state: 'TN',\n          postalCode: '37203',\n          country: 'US'\n        };\n      case 'Aneesh':\n        return {\n          line1: '789 Main St',\n          city: 'Nashville',\n          state: 'TN',\n          postalCode: '37203',\n          country: 'US'\n        };\n      default:\n        return {\n          line1: 'Corner of 65 and Charlotte',\n          city: 'Nashville',\n          state: 'TN',\n          postalCode: '37203',\n          country: 'US'\n        };\n    }\n  }\n\n  ngAfterContentInit() {\n    this.elementRef.nativeElement.classList.add('architect-address-widget');\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nconst id = 'c5d03052-1716-4dfb-a08a-76967051d4cf';\nconst title = 'Architect Address (Angular 4)';\nconst width = {\n  xs: 12,\n  sm: 8,\n  md: 6,\n  lg: 5,\n  xl: 4\n};\nconst initialHeight = '250px';\nconst render = async function(container: HTMLElement) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const appRoot = document.createElement('architect-address-widget');\n      container.appendChild(appRoot);\n      await platformBrowserDynamic().bootstrapModule(AppModule);\n      resolve();\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport default {\n  id,\n  title,\n  width,\n  initialHeight,\n  render\n}\n"],"names":["Bus","this","subscribers","prototype","listen","listener","writeToConsoleInDev","eventName","Error","responder","push","ignore","listeners","length","index","indexOf","splice","notify","event","_this","Promise","resolve","reject","all","map","action","context","process","env","DEV","console","log","BusFactory","window","nhBrowserBus","instance","AppComponent","changeDetectorRef","elementRef","title","bus","address","getAddress","message","name","detectChanges","architect","line1","line2","city","state","postalCode","country","ngAfterContentInit","nativeElement","classList","add","decorators","type","Component","args","selector","template","styles","ctorParameters","ChangeDetectorRef","ElementRef","AppModule","NgModule","declarations","imports","BrowserModule","providers","bootstrap","id","width","xs","sm","md","lg","xl","initialHeight","render","container","__awaiter","appRoot","error_1","document","createElement","appendChild","platformBrowserDynamic","bootstrapModule","_a","sent"],"mappings":"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"}
